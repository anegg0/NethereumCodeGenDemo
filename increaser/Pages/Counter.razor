@page "/counter"
@using EthereumSmartContracts.Contracts.SimpleStorage;
@using EthereumSmartContracts.Contracts.SimpleStorage.ContractDefinition;
@using Nethereum.Web3;
@using Nethereum.Web3.Accounts;
@using System;
@using System.Threading.Tasks;
@using System.Numerics;

<h1>Number Storage</h1>

<button class="btn btn-primary" @onclick="@storeNewNumber">Click me</button>
<div class="form-group">
    <label for="accountBalance">Balance ETH:</label>
    <label id="accountBalance">@currentStoredValue</label>
</div>

@code {

    BigInteger currentStoredValue = 0;

    public async Task storeNewNumber()
    {
        var url = "http://testchain.nethereum.com:8545";
        var privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0";
        var account = new Account(privateKey);
        var web3 = new Web3(account, url);
        //  An already-deployed SimpleStorage.sol contract on Rinkeby:
        var contractAddress = "0xb52Fe7D1E04fbf47918Ad8d868103F03Da6ec4fE";
        var service = new SimpleStorageService(web3, contractAddress);
        // Get the stored value
        currentStoredValue = await service.GetQueryAsync();
        //   var increaseValue = await service.SetRequestAndWaitForReceiptAsync(300000000);
        //   Get the stored value
        //  var currentStoredValue = await service.GetQueryAsync();
        //  Console.WriteLine($"Contract has value stored: {currentStoredValue}");
        Console.WriteLine(currentStoredValue);
        // var service = SimpleStorageService.
    }
}
