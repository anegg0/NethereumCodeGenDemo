@page "/counter"
@using EthereumSmartContracts.Contracts.SimpleStorage;
@using EthereumSmartContracts.Contracts.SimpleStorage.ContractDefinition;
@using Nethereum.Web3;
@using Nethereum.Web3.Accounts;
@using System;
@using System.Threading.Tasks;
@using System.Numerics;
@using Nethereum.Contracts;
@using Nethereum.ABI.FunctionEncoding.Attributes;

<h1>Number Storage</h1>

<button class="btn btn-primary" @onclick="@contractDeployment">Click me</button>
<div class="form-group">
    <label for="contractDeployment">Balance ETH:</label>
    <label id="contractDeployment">@contractAddress</label>
</div>

@code {

    String contractAddress = "";

    class storageContract
    {
        public partial class SimpleStorageDeployment : SimpleStorageDeploymentBase
        {
            public SimpleStorageDeployment() : base(BYTECODE) { }
            public SimpleStorageDeployment(string byteCode) : base(byteCode) { }
        }

        public class SimpleStorageDeploymentBase : ContractDeploymentMessage
        {
            public static string BYTECODE = "6080604052348015600f57600080fd5b5060ac8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806360fe47b11460375780636d4ce63c146053575b600080fd5b605160048036036020811015604b57600080fd5b5035606b565b005b60596070565b60408051918252519081900360200190f35b600055565b6000549056fea264697066735822122055f47757bd29cfa531e3301758f4331fe076386cda1f4badcf1f35b394f14da964736f6c63430006010033";
            public SimpleStorageDeploymentBase() : base(BYTECODE) { }
            public SimpleStorageDeploymentBase(string byteCode) : base(byteCode) { }

        }

        public partial class GetFunction : GetFunctionBase { }

        [Function("get", "uint256")]
        public class GetFunctionBase : FunctionMessage
        {

        }

        public partial class SetFunction : SetFunctionBase { }

        [Function("set")]
        public class SetFunctionBase : FunctionMessage
        {
            [Parameter("uint256", "x", 1)]
            public virtual BigInteger X { get; set; }
        }

        public partial class GetOutputDTO : GetOutputDTOBase { }

        [FunctionOutput]
        public class GetOutputDTOBase : IFunctionOutputDTO
        {
            [Parameter("uint256", "", 1)]
            public virtual BigInteger ReturnValue1 { get; set; }
        }
    }

    public async Task contractDeployment()
    {
        var url = "http://testchain.nethereum.com:8545";
        var privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0";
        var account = new Account(privateKey);
        var web3 = new Web3(account, url);
        //  An already-deployed SimpleStorage.sol contract on Rinkeby:
        var contractAddress = "0xb52Fe7D1E04fbf47918Ad8d868103F03Da6ec4fE";
        var service = new SimpleStorageService(web3, contractAddress);
        // Get the stored value
        var deploymentMessage = new SimpleStorageDeployment;

        // Then we create a deployment handler using our contract deployment definition and simply deploy the contract using the deployment message. We are auto estimating the gas, getting the latest gas price and nonce so nothing else is set anything on the deployment message.
        // Finally, we wait for the deployment transaction to be mined, and retrieve the contract address of the new contract from the receipt.

        var deploymentHandler = web3.Eth.GetContractDeploymentHandler<SimpleStorageDeployment>();

        var transactionReceipt = await deploymentHandler.SendRequestAndWaitForReceiptAsync(deploymentMessage);

        //var contractAddress = transactionReceipt.ContractAddress;

        Console.WriteLine("Deployed Contract address is: " + contractAddress);

        // contractAddress = await service.GetQueryAsync();
        //   var increaseValue = await service.SetRequestAndWaitForReceiptAsync(300000000);
        //   Get the stored value
        //  var currentStoredValue = await service.GetQueryAsync();
        //  Console.WriteLine($"Contract has value stored: {currentStoredValue}");
        Console.WriteLine(contractAddress);
        // var service = SimpleStorageService.
    }
}
